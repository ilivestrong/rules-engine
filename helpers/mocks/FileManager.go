// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	models "github.com/ilivestrong/rules-engine/models"
	mock "github.com/stretchr/testify/mock"
)

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

// ListApprovedPhones provides a mock function with given fields:
func (_m *FileManager) ListApprovedPhones() (map[string]bool, error) {
	ret := _m.Called()

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func() map[string]bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRulesFromConfig provides a mock function with given fields:
func (_m *FileManager) LoadRulesFromConfig() ([]models.RuleInfo, error) {
	ret := _m.Called()

	var r0 []models.RuleInfo
	if rf, ok := ret.Get(0).(func() []models.RuleInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RuleInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistApprovedPhone provides a mock function with given fields: phone
func (_m *FileManager) PersistApprovedPhone(phone string) error {
	ret := _m.Called(phone)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(phone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileManager creates a new instance of FileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileManager(t mockConstructorTestingTNewFileManager) *FileManager {
	mock := &FileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
